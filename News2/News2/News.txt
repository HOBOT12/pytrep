1.Создать двух пользователей (с помощью метода User.objects.create_user).

>>> u1 = User.objects.create_user(username='user_1')
>>> u2 = User.objects.create_user(username='user_2')

2.Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=u1)
Author.objects.create(authorUser=u2)

3.Добавить 4 категории в модель Category.

>>> Category.objects.create(name='category_1')
>>> Category.objects.create(name='category_2')
>>> Category.objects.create(name='category_3')
>>> Category.objects.create(name='category_4')

4.Добавить 2 статьи и 1 новость.

>>> Post.objects.create(author=author, categoryType='NW', title='sometitle', text='sometext')
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle', text='sometext')
>>> Post.objects.create(author=author, categoryType='AR', title='sometitle', text='sometext')

5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))

6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).


>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text ='some
text')
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text ='some
text')
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text ='some
text')
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text ='some
text')

7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Comment.objects.get(id=1).like()
Post.objects.get(id=1).like()


8.Обновить рейтинги пользователей.

Author.objects.get(id=1).update_rating()
Author.objects.get(id=1).ratingAuthor

9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

 a = Author.objects.order_by('-ratingAuthor')[:-1]
 for i in a:
     i.ratingAuthor
     i.authorUser.username




10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.


bestArticleId = Post.objects.all().order_by('-rating').values('id')[0]

bestArticle = Post.objects.get(id=bestArticleId.get('id'))

print(f'Date: {bestArticle.dateCreation.ctime()}, \
\nAuthor: {bestArticle.author.authorUser.username}, \
\nRating: {bestArticle.rating}, \
\nTitle: {bestArticle.title}, \
\nText preview: { bestArticle.preview()}')





11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.


Comment.objects.get(id=bestArticleId.get("id")).text
Comment.objects.get(id=bestArticleId.get("id")).dateCreation.ctime()
Comment.objects.get(id=bestArticleId.get("id")).rating
Comment.objects.get(id=bestArticleId.get("id")).commentUser



